import requests
from urllib.parse import urljoin
from bs4 import BeautifulSoup

# List of payloads for testing SQL Injection
sql_payloads = [
    "' OR '1'='1",
    "' OR '1'='1' --",
    "' OR 1=1 --",
    "' OR '1'='1' /*",
    "\" OR \"1\"=\"1",
]

# List of payloads for testing XSS
xss_payloads = [
    "<script>alert('XSS')</script>",
    "\" onmouseover=\"alert('XSS')",
    "';alert(String.fromCharCode(88,83,83))//",
]

# Function to extract all forms from a webpage
def get_all_forms(url):
    """
    Given a URL, returns all form tags found on that page.
    """
    try:
        res = requests.get(url, timeout=10)
        soup = BeautifulSoup(res.content, "html.parser")
        return soup.find_all("form")
    except Exception as e:
        print(f"Failed to get forms from {url} due to {e}")
        return []

# Function to get form details
def get_form_details(form):
    """
    Extracts useful information from an HTML form.
    """
    details = {}
    action = form.attrs.get("action")
    method = form.attrs.get("method", "get").lower()
    inputs = []

    for input_tag in form.find_all("input"):
        input_type = input_tag.attrs.get("type", "text")
        input_name = input_tag.attrs.get("name")
        if input_name:
            inputs.append({"type": input_type, "name": input_name})

    details['action'] = action
    details['method'] = method
    details['inputs'] = inputs
    return details

# Function to submit a form
def submit_form(form_details, url, payload):
    """
    Submits a form with a given payload to test for vulnerabilities.
    """
    target_url = urljoin(url, form_details["action"])
    inputs = form_details["inputs"]

    data = {}
    for input in inputs:
        if input["type"] == "text" or input["type"] == "search" or input["type"] == "email":
            data[input["name"]] = payload
        else:
            data[input["name"]] = "test"

    if form_details["method"] == "post":
        return requests.post(target_url, data=data)
    else:
        return requests.get(target_url, params=data)

# Function to check for SQL Injection
def test_sql_injection(url):
    """
    Tests a URL for SQL Injection vulnerabilities.
    """
    print("\n[+] Testing for SQL Injection vulnerabilities...")
    forms = get_all_forms(url)
    for form in forms:
        form_details = get_form_details(form)
        for payload in sql_payloads:
            response = submit_form(form_details, url, payload)
            if "syntax error" in response.text.lower() or "sql" in response.text.lower() or "mysql" in response.text.lower():
                print(f"[!] Possible SQL Injection vulnerability detected with payload: {payload}")
                print(f"--> Affected URL: {response.url}")
                break

# Function to check for XSS
def test_xss(url):
    """
    Tests a URL for Cross-Site Scripting (XSS) vulnerabilities.
    """
    print("\n[+] Testing for Cross-Site Scripting (XSS) vulnerabilities...")
    forms = get_all_forms(url)
    for form in forms:
        form_details = get_form_details(form)
        for payload in xss_payloads:
            response = submit_form(form_details, url, payload)
            if payload in response.text:
                print(f"[!] Possible XSS vulnerability detected with payload: {payload}")
                print(f"--> Affected URL: {response.url}")
                break

# Main function
def main():
    print("="*60)
    print("        Simple Web Application Vulnerability Scanner")
    print("="*60)

    target_url = input("Enter the URL of the web application: ").strip()

    # Checking if the URL is reachable
    try:
        res = requests.get(target_url, timeout=10)
        if res.status_code != 200:
            print(f"Failed to access {target_url}. Status code: {res.status_code}")
            return
    except Exception as e:
        print(f"Failed to access {target_url}: {e}")
        return

    # Testing for vulnerabilities
    test_sql_injection(target_url)
    test_xss(target_url)

    print("\nScan complete!")
    print("="*60)

if __name__ == "__main__":
    main()
